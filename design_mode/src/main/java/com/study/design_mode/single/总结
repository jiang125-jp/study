单例的几个场景：

abstractFactory
ErrorContext: mybatis中的错误上下文，每一个操作线程的错误上下文隔离

优点：内存中只有一个实例，减少开销，避免对资源的多重占用，设置全局访问点，严格控制访问
缺点：扩展困难

总结：
  私有化构造器，提供唯一的全局访问点(静态成员变量)
  保证线程安全
  延迟加载
  防止序列化和反序列化的破坏
  防止反射攻击单例

破坏单例的方式：
  1、多线程 （双重检索、加锁、静态内部类）
  2、指令重排 （加volatile修饰符）
  3、克隆 （重写clone方法）
  4、反射 (在私有的无参构造里面检查单例对象，如果创建了抛出异常，或者把单例模式改为枚举，枚举不允许反射生成，官方认证)
  5、反序列化 (加readResolve方法)

实用场景：
  1、如果程序不是很复杂，单例对象不多，推荐使用饿汉式单例
  2、如果经常发生多线程并发情况，推荐使用静态内部类和枚举的单例

总结：
  单例就是为了保证一个服务只有一个实例

问题： 容器式单例，用的式ConcurrentMao,为什么还有线程安全问题？容器式单例也能被反射破坏？

